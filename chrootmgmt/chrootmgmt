#!/bin/sh
#
# This script manages chroot directories
#
set -eu

# Constants
CHROOT_BASE="${CHROOT_BASE:-/mnt/chroot}"
CHROOT_ROOT_SUBVOL="${CHROOT_ROOT_SUBVOL:-${CHROOT_BASE}/root}"
CHROOT_DEV="${CHROOT_DEV:-LABEL=CHROOT}"
OVERLAY_BASE="${OVERLAY_BASE:-/home/yoshi/Documents/portage}"

# Global variables
OVERLAYS=''
EXEC_CMD='/bin/bash -l'
TARBALL=''
ACTION=''
CHROOT=''
CUSTOM_MAKE_CONF=''

umask 022

# Text constants
ROOT_PROFILE="$(cat <<'EOF'
PKG_TEST=''
pksetup() {
	PKG_TEST="$1"
	echo "${PKG_TEST} **" >>/etc/portage/package.accept_keywords
	echo "${PKG_TEST} test.conf" >>/etc/portage/package.env
	echo "${PKG_TEST} qa.conf" >>/etc/portage/package.env
}
alias emerge_deps='emerge -1av --onlydeps --with-test-deps ${PKG_TEST}'
alias emerge_pkg='emerge -1av ${PKG_TEST}'
env-update
. /etc/profile
PS1="(chroot) ${PS1}"
export PS1
cd "${HOME}"
EOF
)"
FIRST_CHROOT_SCRIPT="$(cat <<'EOF'
#!/bin/bash
locale-gen
eselect locale set en_US.utf8
env-update
. /etc/profile
export PS1="(chroot) ${PS1}"
emerge -1v sys-apps/portage
echo "This is the first chroot for initial configuration"
echo "After quitting chroot, a backup will be made"
exec bash -l
EOF
)"
MAKE_CONF="$(cat <<EOF
MAKEOPTS="$(portageq envvar MAKEOPTS)"
ACCEPT_LICENSE="-* @FREE"
EMERGE_DEFAULT_OPTS="$(portageq envvar EMERGE_DEFAULT_OPTS)"
PORTAGE_NICENESS="$(portageq envvar PORTAGE_NICENESS)"
PORTAGE_IONICE_COMMAND="ionice -c 3 -p \\\${PID}"
FEATURES="cgroup ipc-sandbox mount-sandbox network-sandbox pid-sandbox sandbox userfetch userpriv usersandbox collision-protect protect-owned strict strict-keepdir parallel-fetch parallel-install -news"
GENTOO_MIRRORS="$(portageq envvar GENTOO_MIRRORS)"
ALLOW_TEST="\${ALLOW_TEST} network"
EOF
)"
MAKE_CONF_MULTILIB='FEATURES="${FEATURES} multilib-strict"'
MAKE_CONF_MUSL='RUSTFLAGS="-C target-feature=-crt-static"'

#
# usage() - Print help message
#

usage() {
	cat <<EOF
Usage: $0 [-o OVERLAY] [-t TARBALL] [-x EXEC_CMD] ACTION CHROOT
  -o, --overlay     Add an overlay to the chroot (start, new)
  -t, --tarball     Use this tarball when creating the chroot (new)
  -x, --exec        Use this command when chrooting (start)
  -m, --make        File path with data to append to portage's make.conf

Actions :
  start: Load chroot
  chroot: Chroot into CHROOT
  stop: Unload chroot
  new: Creates a new CHROOT using the given tarball
  destroy: Destroy a CHROOT and its backups
  backup: Set the current state of CHROOT as the base state
  reset: Rollback CHROOT to its base state

The tarball is a tar archive, possibly compressed.
Multiple overlay can be given, they will be added to /var/db/repos and
appended to /etc/portage/repos.conf.
The exec command is executed as is when chrooting.
EOF
}

#
# die() - Exit with error
#

die() {
	echo "FATAL: " "$@" 1>&2
	exit 1
}

#
# parse() - Parse arguments
# Usage: parse "$@"
#

parse() {
	unset loop
	while [ $# -ne 0 ] || [ -n "${loop+x}" ]; do
		[ -z "${loop+x}" ] && arg="$1" && shift
		unset loop
		case "${arg}" in
		-o|--overlay)
			OVERLAYS="${OVERLAYS} $1"
			shift
			;;
		-o*)
			OVERLAYS="${OVERLAYS} ${arg#??}"
			;;
		--overlay=*)
			OVERLAYS="${OVERLAYS} ${arg#*=}"
			;;
		-t|--tarball)
			TARBALL="$1"
			shift
			;;
		-t*)
			TARBALL="${arg#??}"
			;;
		--tarball=*)
			TARBALL="${arg#*=}"
			;;
		-x|--exec)
			EXEC_CMD="$1"
			shift
			;;
		-x*)
			EXEC_CMD="${arg#??}"
			;;
		--exec=*)
			EXEC_CMD="${arg#*=}"
			;;
		-m|--make)
			CUSTOM_MAKE_CONF="$(cat "$1")"
			shift
			;;
		-m*)
			CUSTOM_MAKE_CONF="$(cat "${arg#??}")"
			;;
		--make=*)
			CUSTOM_MAKE_CONF="$(cat "${arg#*=}")"
			;;
		-h|--help)
			usage
			exit 0
			;;
		-h*)
			arg="-${arg#??}"
			loop=
			;;
		--)
			arg="$1"
			break
			;;
		-?*)
			usage
			die "Unknown option ${arg}"
			;;
		*)
			break
			;;
		esac
	done
	ACTION="${arg}"
	case "${1}" in
		/*) CHROOT="${1}" ;;
		*) CHROOT="${CHROOT_BASE}/${1}" ;;
	esac
	echo "${OVERLAYS}" | grep -q "gentoo" || OVERLAYS="${OVERLAYS} gentoo"
}

#
# status() - Prints the chroot status
#

status() {
	mountpoint -q "${CHROOT}" && mounted="mounted" || mounted="not mounted"
	printf "%s: %s\n" "${CHROOT}" "${mounted}"
}

#
# start() - Start chroot: prepare for chroot
#

start() {
	set -eu

	#
	# Check arguments
	#

	for overlay in ${OVERLAYS}; do
		[ -d "${OVERLAY_BASE}/${overlay}" ] \
			|| die "Overlay ${overlay} not found"
	done
	[ -d "${CHROOT}" ] || die "Chroot ${CHROOT} not found"
	mountpoint -q "${CHROOT}" && die "${CHROOT} already mounted" || :

	#
	# Mount normal filesystem
	#

	# Mount /
	subvol="$(basename -- "${CHROOT}")"
	mount \
		-t btrfs \
		-o "noatime,rw,ssd,compress=zstd:3,subvol=${subvol}" \
		"${CHROOT_DEV}" "${CHROOT}"
	# Mount /tmp
	mount \
		-t tmpfs \
		-o noatime,nodev,nosuid,noexec,size=8g,mode=1777 \
		none "${CHROOT}/tmp"
	# Mount /var/tmp/portage
	if [ ! -d "${CHROOT}/var/tmp/portage" ]; then
		mkdir "${CHROOT}/var/tmp/portage"
		chown portage:portage "${CHROOT}/var/tmp/portage"
		chmod 0775 "${CHROOT}/var/tmp/portage"
	fi
	mount \
		-t tmpfs \
		-o noatime,nodev,nosuid,size=8g,uid=portage,gid=portage,mode=775 \
		none "${CHROOT}/var/tmp/portage"
	# Create /var/tmp/portage-notmpfs
	if [ ! -d "${CHROOT}/var/tmp/portage-notmpfs" ]; then
		mkdir "${CHROOT}/var/tmp/portage-notmpfs"
		chown portage:portage "${CHROOT}/var/tmp/portage-notmpfs"
		chmod 0775 "${CHROOT}/var/tmp/portage-notmpfs"
	fi
	# Mount /usr/src
	mount --bind -o ro /usr/src "${CHROOT}/usr/src"

	#
	# Create configuration
	#

	# Portage configuration
	printf "%s\n%s\n" "${MAKE_CONF}" "${CUSTOM_MAKE_CONF}" \
		>"${CHROOT}/etc/portage/chroot.make.conf"
	[ -e "${CHROOT}/lib64" ] && printf "%s\n" "${MAKE_CONF_MULTILIB}" \
		>>"${CHROOT}/etc/portage/chroot.make.conf"
	case "$(basename -- "${CHROOT}")" in
	*musl*)
		printf "%s\n" "${MAKE_CONF_MUSL}" \
			>>"${CHROOT}/etc/portage/chroot.make.conf"
	esac
	[ -d "${CHROOT}/etc/portage/repos.conf" ] \
		|| mkdir -p "${CHROOT}/etc/portage/repos.conf"
	cp -L "${CHROOT}/usr/share/portage/config/repos.conf" \
		"${CHROOT}/etc/portage/repos.conf/gentoo.conf"
	[ -d "${CHROOT}/etc/portage/package.use" ] \
		|| mkdir "${CHROOT}/etc/portage/package.use"
	echo "sys-apps/portage gentoo-dev" \
		>"${CHROOT}/etc/portage/package.use/portage"
	[ -d "${CHROOT}/etc/portage/env" ] \
		|| mkdir "${CHROOT}/etc/portage/env"
	echo 'PORTAGE_TMPDIR="/var/tmp/portage-notmpfs"' \
		>"${CHROOT}/etc/portage/env/notmpfs.conf"
	echo 'FEATURES="${FEATURES} test"' \
		>"${CHROOT}/etc/portage/env/test.conf"
	echo 'FEATURES="${FEATURES} strict strict-keepdir stricter"' \
		>"${CHROOT}/etc/portage/env/qa.conf"
	echo 'CMAKE_QA_SRC_DIR_READONLY=y' \
		>>"${CHROOT}/etc/portage/env/qa.conf"

	# System configuration
	echo "C.UTF8 UTF-8" >"${CHROOT}/etc/locale.gen"
	echo "en_US.UTF-8 UTF-8" >>"${CHROOT}/etc/locale.gen"
	[ -e "${CHROOT}/root/.bash_history" ] \
		|| ln -s /dev/null "${CHROOT}/root/.bash_history"

	# root .profile
	printf "%s\n" "${ROOT_PROFILE}" >"${CHROOT}/root/.profile"

	#
	# Mount overlays
	#

	for overlay in ${OVERLAYS}; do
		[ -d "${CHROOT}/var/db/repos/${overlay}" ] \
			|| mkdir -p "${CHROOT}/var/db/repos/${overlay}"
		mount \
			--bind \
			-o ro \
			"${OVERLAY_BASE}/${overlay}" \
			"${CHROOT}/var/db/repos/${overlay}"
		[ -f "${CHROOT}/etc/portage/repos.conf/${overlay}.conf" ] \
			|| cat <<EOF >"${CHROOT}/etc/portage/repos.conf/${overlay}.conf"
[$(head -1 "${OVERLAY_BASE}/${overlay}/profiles/repo_name")]
location = /var/db/repos/${overlay}
auto-sync = no
EOF
	done

	#
	# Mount specials filesystems
	#

	# Mount /proc /sys /dev
	mount --types proc /proc "${CHROOT}/proc"
	mount --rbind /sys "${CHROOT}/sys"
	mount --make-rslave "${CHROOT}/sys"
	mount --rbind /dev "${CHROOT}/dev"
	mount --make-rslave "${CHROOT}/dev"
	mount --types tmpfs none "${CHROOT}/run"
	# Mount /dev/shm if required
	if [ -L /dev/shm ]; then
		rm /dev/shm
		mkdir /dev/shm
		mount -t tmpfs -o noatime,nodev,nosuid,noexec,size=1g shm /dev/shm
		chmod 1777 /dev/shm
	fi

	#
	# Host configuration
	#

	# Networking
	cp --dereference /etc/resolv.conf "${CHROOT}/etc/"
}

#
# chroot() - Chroot into a directory
#

run_chroot() {
	if ! mountpoint -q "${CHROOT}"; then
		start || die "Could not start ${CHROOT}"
		auto_stop=1
	fi
	chroot "${CHROOT}" ${EXEC_CMD}
	if [ -n "${auto_stop:-}" ]; then
		stop || die "Could not stop ${CHROOT}"
	fi
}

#
# stop() - Stop mounted chroot
#

stop() {
	if [ -n "$(lsof -t "${CHROOT}")" ]; then
		lsof -t "${CHROOT}" | xargs kill -TERM
		sleep 3
		if [ -n "$(lsof -t "${CHROOT}")" ]; then
			lsof -t "${CHROOT}" | xargs kill -KILL
		fi
	fi
	umount -R "${CHROOT}"
}

#
# new() - Action to create new chroot environment
#

new() {
	set -eu

	#
	# Check arguments
	#

	chroot_name="$(basename -- "${CHROOT}")"
	chroot_subvol="${CHROOT_ROOT_SUBVOL}/${chroot_name}"
	mountpoint -q "${CHROOT}" && die "${CHROOT} is mounted"
	[ ! -d "${chroot_subvol}" ] || die "${chroot_subvol} already exists"
	[ -f "${TARBALL}" ] || die "Tarball ${TARBALL} not found"

	#
	# Install base layout
	#

	btrfs subvolume create "${chroot_subvol}"
	tar \
		-xpf "${TARBALL}" \
		--xattrs-include='*.*' --numeric-owner \
		-C "${chroot_subvol}"

	#
	# Configure system
	#

	# Portage configuration
	echo "source /etc/portage/chroot.make.conf" \
		>>"${chroot_subvol}/etc/portage/make.conf"

	# First chroot script
	printf "%s\n" "${FIRST_CHROOT_SCRIPT}" >"${chroot_subvol}/root/.first"
	chmod +x "${chroot_subvol}/root/.first"
	EXEC_CMD="/root/.first"

	#
	# First chroot
	#

	# Create chroot directory
	if [ ! -d "${CHROOT}" ]; then
		mkdir "${CHROOT}" || die "Could not create ${CHROOT} directory"
	fi

	# Chroot
	start
	run_chroot || :
	stop
	backup
}

#
# backup() - Set current CHROOT state as base state
#

backup() {
	set -eu

	#
	# Check arguments
	#

	chroot_name="$(basename -- "${CHROOT}")"
	chroot_subvol="${CHROOT_ROOT_SUBVOL}/${chroot_name}"
	chroot_base="${chroot_subvol}-base"
	[ -d "${chroot_subvol}" ] || die "Subvolume ${chroot_subvol} not found"
	mountpoint -q "${CHROOT}" && stop

	#
	# Backup
	#

	# Purge distfiles
	rm -r "${chroot_subvol}"/var/cache/distfiles/* || :

	# Remove old base and backup
	if [ -d "${chroot_base}" ]; then
		btrfs subvolume delete "${chroot_base}"
	fi
	btrfs subvolume snapshot -r "${chroot_subvol}" "${chroot_base}"
}

#
# reset() - Rollback CHROOT state to base state
#

reset() {
	set -eu

	#
	# Check arguments
	#

	chroot_name="$(basename -- "${CHROOT}")"
	chroot_subvol="${CHROOT_ROOT_SUBVOL}/${chroot_name}"
	chroot_base="${chroot_subvol}-base"
	[ -d "${chroot_subvol}" ] || die "Subvolume ${chroot_subvol} not found"
	[ -d "${chroot_base}" ] || die "Subvolume ${chroot_base} not found"
	mountpoint -q "${CHROOT}" && stop && auto_start=1

	#
	# Rollback
	#

	btrfs subvolume delete "${chroot_subvol}"
	btrfs subvolume snapshot "${chroot_base}" "${chroot_subvol}"
	[ -n "${auto_start:-}" ] && start
}

#
# destroy() - Destroy the CHROOT and all its backups
#

destroy() {
	set -eu

	#
	# Check arguments
	#

	chroot_name="$(basename -- "${CHROOT}")"
	chroot_subvol="${CHROOT_ROOT_SUBVOL}/${chroot_name}"
	chroot_base="${chroot_subvol}-base"
	[ -d "${chroot_subvol}" ] || die "Subvolume ${chroot_subvol} not found"
	mountpoint -q "${CHROOT}" && stop

	#
	# Destruction
	#

	if [ -d "${chroot_base}" ]; then
		btrfs subvolume delete "${chroot_base}"
	fi
	btrfs subvolume delete "${chroot_subvol}"
	rmdir "${CHROOT}" || echo "Could not delete ${CHROOT} directory"
}

#
# Start of the script
#

parse "$@"
[ "$(id -u)" -eq 0 ] || die 'root permissions required'

case "${ACTION}" in
	status) status ;;
	start) start ;;
	stop) stop ;;
	chroot) run_chroot ;;
	new) new ;;
	backup) backup ;;
	reset) reset ;;
	destroy) destroy ;;
esac

